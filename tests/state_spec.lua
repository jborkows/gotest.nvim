local state = require("gotest.state")
local parser = require("gotest.parser")
local assert = require("luassert.assert")
describe("state tests", function()
	before_each(function()
		state.clear()
	end)
	it("when started everything should be empty", function()
		assert.equals("N/A", state.state("package", "test"))
		assert.equals(0, table.maxn(state.outputs("package", "test")))
	end)
	it("run message should not change anything in the begining", function()
		state.onMessage(parser.parse('{"Action":"run","Package":"package","Test":"test"}'))
		assert.equals("N/A", state.state("package", "test"))
		assert.equals(0, table.maxn(state.outputs("package", "test")))
	end)

	it("should ignore not parsed messages", function()
		state.onMessage(parser.parse('{"Action":"runxxxx","Package":"package","Test":"test"}'))
		assert.equals("N/A", state.state("package", "test"))
		assert.equals(0, table.maxn(state.outputs("package", "test")))
	end)

	it("run + output should not change anything in the begining", function()
		state.onMessage(parser.parse('{"Action":"run","Package":"package","Test":"test"}'))
		state.onMessage(parser.parse(
		'{"Action":"output","Package":"package","Test":"test", "Output":"Some text"}'))
		assert.equals("N/A", state.state("package", "test"))
		assert.equals(1, table.maxn(state.outputs("package", "test")))
	end)
end)
