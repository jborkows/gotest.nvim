local core = require("gotest.core")
local state = core.state

local assert = require("luassert.assert")
local key = core.TestIdentifier:new("package", "test")
describe("state tests", function()
	before_each(function()
		state.clear()
	end)
	it("when started everything should be empty", function()
		assert.equals("N/A", state.state(key))
		assert.equals(0, table.maxn(state.outputs(key)))
	end)
	it("run message should not change anything in the begining", function()
		state.onParsing(core.ParsingResult:onlyEvent(core.running(key)))
		assert.equals("run", state.state(key))
		assert.equals(0, table.maxn(state.outputs(key)))
	end)

	it("run after failure should clean up", function()
		state.onParsing(core.ParsingResult:onlyEvent(core.running(key)))
		state.onParsing(core.ParsingResult:onlyEvent(core.failure(key)))
		state.onParsing(core.ParsingResult:onlyEvent(core.running(key)))
		assert.equals("run", state.state(key))
		assert.equals(0, table.maxn(state.outputs(key)))
	end)

	it("run after success should clean up", function()
		state.onParsing(core.ParsingResult:onlyEvent(core.running(key)))
		state.onParsing(core.ParsingResult:onlyEvent(core.success(key)))
		state.onParsing(core.ParsingResult:onlyEvent(core.running(key)))
		assert.equals("run", state.state(key))
		assert.equals(0, table.maxn(state.outputs(key)))
	end)

	it("receiving success and output", function()
		state.onParsing(core.ParsingResult:onlyEvent(core.running(key)))
		state.onParsing(core.ParsingResult:onlyEvent(core.success(key)))
		state.onParsing(core.ParsingResult:onlyOutput(core.testOutput(key)("haha")))
		state.onParsing(core.ParsingResult:onlyOutput(core.testOutput(key)("buhaha")))
		assert.equals("success", state.state(key))
		assert.equals(2, table.maxn(state.outputs(key)))
	end)
end)
